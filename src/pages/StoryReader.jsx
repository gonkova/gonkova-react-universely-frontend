// src/pages/StoryReader.jsx
import { useParams, useNavigate } from "react-router-dom";
import { useEffect } from "react";
import { useStoryPlayer } from "@/hooks/useStoryPlayer";
import Spinner from "@/components/ui/Spinner";
import Button from "@/components/ui/Button";

export default function StoryReader() {
  const { id } = useParams();
  const navigate = useNavigate();

  const { history, current, loading, error, reload, choose, isEnded } =
    useStoryPlayer(id);

  // DEBUG (–ø–æ –∂–µ–ª–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–∏)
  useEffect(() => {
    console.log("üìå Current passage:", current);
    console.log("üìù History:", history);
  }, [current, history]);

  // 1) –ò—Å—Ç–∏–Ω—Å–∫–∞ –≥—Ä–µ—à–∫–∞
  if (error) {
    return (
      <div className="p-6 text-center">
        <div className="text-red-600 mb-4">–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ.</div>
        <Button variant="secondary" onClick={reload}>
          üîÑ –û–ø–∏—Ç–∞–π –ø–∞–∫
        </Button>
      </div>
    );
  }

  // 2) –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ (–æ—â–µ –Ω—è–º–∞–º–µ current)
  if (!current) {
    return (
      <div className="p-10 flex items-center justify-center">
        <Spinner />
      </div>
    );
  }

  // 3) –û—Å–Ω–æ–≤–µ–Ω —Ä–µ–Ω–¥–µ—Ä
  return (
    <div className="max-w-3xl mx-auto px-4 py-6 space-y-6">
      <Button
        variant="secondary"
        onClick={() => navigate(-1)}
        className="transition-transform hover:-translate-x-1 hover:scale-105"
      >
        ‚Üê Back
      </Button>

      {/* –ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –ø–∞—Å–∞–∂–∏—Ç–µ */}
      <div className="space-y-6">
        {history.map((passage, idx) => {
          const isLast = idx === history.length - 1;

          return (
            <article
              key={passage.id}
              className="bg-white dark:bg-gray-800 rounded-lg shadow p-6"
            >
              {/* –¢–µ–∫—Å—Ç –Ω–∞ –ø–∞—Å–∞–∂–∞ */}
              <div className="whitespace-pre-line text-lg leading-relaxed text-gray-900 dark:text-gray-100">
                {passage.narrative}
              </div>

              {/* –ò–∑–±–æ—Ä–∏ ‚Äì —Å–∞–º–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è –ø–∞—Å–∞–∂ –∏ –∞–∫–æ –Ω–µ –µ –∫—Ä–∞–π */}
              {isLast && !isEnded && (
                <div className="mt-6 grid gap-3">
                  {(passage.choices || []).map((ch) => (
                    <Button
                      key={ch.id}
                      variant="primary"
                      onClick={() => choose(ch)}
                      disabled={loading}
                      className="text-left"
                    >
                      {ch.description}
                    </Button>
                  ))}
                </div>
              )}

              {/* –ö—Ä–∞–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ */}
              {isLast && isEnded && (
                <div className="mt-6 p-4 bg-green-50 dark:bg-green-900 border border-green-200 dark:border-green-700 rounded-md text-green-800 dark:text-green-100">
                  –ö—Ä–∞–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞. –ë–ª–∞–≥–æ–¥–∞—Ä—è, —á–µ –∏–≥—Ä–∞! ‚ú®
                </div>
              )}
            </article>
          );
        })}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á–µ –º–∏—Å–ª–∏–º –∑–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –ø–∞—Å–∞–∂, –Ω–æ –ù–ï —Å–∫—Ä–∏–≤–∞–º–µ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ */}
      {loading && (
        <div className="flex items-center gap-2 text-sm text-gray-500">
          <Spinner size="sm" /> –º–∏—Å–ª—è...
        </div>
      )}
    </div>
  );
}
